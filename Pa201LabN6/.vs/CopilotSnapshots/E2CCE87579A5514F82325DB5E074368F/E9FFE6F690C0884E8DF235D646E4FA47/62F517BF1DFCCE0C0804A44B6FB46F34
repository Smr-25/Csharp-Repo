using System;
using System.Threading;

namespace Pa201LabN6
{
    internal class Courier
    {
        // Static field to generate unique incremental Ids in a thread-safe way
        private static int _nextId = 0;

        // Unique identifier for the courier (assigned automatically)
        public int Id { get; }

        // Courier name (Adı)
        public string Adı { get; set; }

        // Indicates whether the courier is currently available to accept orders
        public bool IsAvailable { get; set; }

        // Constructor that assigns a unique Id and sets name and availability
        public Courier(string adı, bool isAvailable = true)
        {
            Id = Interlocked.Increment(ref _nextId);
            Adı = adı ?? string.Empty;
            IsAvailable = isAvailable;
        }

        // Optional: toggle availability
        public void ToggleAvailability() => IsAvailable = !IsAvailable;

        public override string ToString()
        {
            return $"Courier {{ Id = {Id}, Adı = {Adı}, IsAvailable = {IsAvailable} }}";
        }
    }
}
