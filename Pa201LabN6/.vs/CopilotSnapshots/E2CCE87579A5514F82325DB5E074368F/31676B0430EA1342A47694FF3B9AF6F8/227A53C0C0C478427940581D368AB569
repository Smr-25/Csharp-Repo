using System;
using System.Collections.Generic;
using System.Linq;

namespace Pa201LabN6
{
    internal class CargoService : ICargoService
    {
        public List<Customer> Customers { get; set; }
        public List<Courier> Couriers { get; set; }
        public List<CargoOrder> CargoOrders { get; set; }

        public CargoService()
        {
            Customers = new List<Customer>();
            Couriers = new List<Courier>();
            CargoOrders = new List<CargoOrder>();
        }

        public void AddCourier(Courier courier)
        {
            Couriers.Add(courier);
            Console.WriteLine("Added Courier");
        }

        public void AddCustomer(Customer customer)
        {
            Customers.Add(customer);
            Console.WriteLine("Added Customer");
        }

        public void CompleteOrder(int orderId)
        {
            var order = CargoOrders.FirstOrDefault(o => o.Id == orderId);
            if (order == null)
                throw new Exception("Order not found");

            var courier = Couriers.FirstOrDefault(c => c.Id == order.CourierId);

            if (courier != null)
                courier.IsAvailable = true;

            CargoOrders.Remove(order);
            Console.WriteLine($"Order {orderId} completed");
        }

        public CargoOrder CreateOrder(CargoOrder cargoOrder)
        {
            if (!Customers.Any(c => c.Id == cargoOrder.CustomerId))
                throw new Exception("Customer not found");

            var courier = Couriers.FirstOrDefault(c => c.Id == cargoOrder.CourierId);

            if (courier == null)
                throw new Exception("Courier not found");

            if (!courier.IsAvailable)
                throw new CourierNotAvailableException("Courier is not available");

            courier.IsAvailable = false;
            CargoOrders.Add(cargoOrder);
            Console.WriteLine($"Order {cargoOrder.Id} created");
            return cargoOrder;
        }
    }
}
